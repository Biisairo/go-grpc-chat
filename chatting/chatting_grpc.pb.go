// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: chatting/chatting.proto

// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative chatting/chatting.proto

package chatting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Chatting_Login_FullMethodName         = "/chatting.Chatting/Login"
	Chatting_Logout_FullMethodName        = "/chatting.Chatting/Logout"
	Chatting_GetChatRoom_FullMethodName   = "/chatting.Chatting/GetChatRoom"
	Chatting_CreateRoom_FullMethodName    = "/chatting.Chatting/CreateRoom"
	Chatting_RemoveRoom_FullMethodName    = "/chatting.Chatting/RemoveRoom"
	Chatting_EnterChatRoom_FullMethodName = "/chatting.Chatting/EnterChatRoom"
	Chatting_ExitChatRoom_FullMethodName  = "/chatting.Chatting/ExitChatRoom"
	Chatting_Chatting_FullMethodName      = "/chatting.Chatting/Chatting"
)

// ChattingClient is the client API for Chatting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChattingClient interface {
	Login(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	GetChatRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Room], error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error)
	RemoveRoom(ctx context.Context, in *RemoveRoomRequest, opts ...grpc.CallOption) (*Empty, error)
	EnterChatRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*Empty, error)
	ExitChatRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Chatting(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error)
}

type chattingClient struct {
	cc grpc.ClientConnInterface
}

func NewChattingClient(cc grpc.ClientConnInterface) ChattingClient {
	return &chattingClient{cc}
}

func (c *chattingClient) Login(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, Chatting_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chattingClient) Logout(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Chatting_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chattingClient) GetChatRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Room], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatting_ServiceDesc.Streams[0], Chatting_GetChatRoom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, Room]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatting_GetChatRoomClient = grpc.ServerStreamingClient[Room]

func (c *chattingClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Room)
	err := c.cc.Invoke(ctx, Chatting_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chattingClient) RemoveRoom(ctx context.Context, in *RemoveRoomRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Chatting_RemoveRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chattingClient) EnterChatRoom(ctx context.Context, in *RoomRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Chatting_EnterChatRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chattingClient) ExitChatRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Chatting_ExitChatRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chattingClient) Chatting(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chatting_ServiceDesc.Streams[1], Chatting_Chatting_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Message, Message]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatting_ChattingClient = grpc.BidiStreamingClient[Message, Message]

// ChattingServer is the server API for Chatting service.
// All implementations must embed UnimplementedChattingServer
// for forward compatibility.
type ChattingServer interface {
	Login(context.Context, *Empty) (*User, error)
	Logout(context.Context, *Empty) (*Empty, error)
	GetChatRoom(*Empty, grpc.ServerStreamingServer[Room]) error
	CreateRoom(context.Context, *CreateRoomRequest) (*Room, error)
	RemoveRoom(context.Context, *RemoveRoomRequest) (*Empty, error)
	EnterChatRoom(context.Context, *RoomRequest) (*Empty, error)
	ExitChatRoom(context.Context, *Empty) (*Empty, error)
	Chatting(grpc.BidiStreamingServer[Message, Message]) error
	mustEmbedUnimplementedChattingServer()
}

// UnimplementedChattingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChattingServer struct{}

func (UnimplementedChattingServer) Login(context.Context, *Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChattingServer) Logout(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedChattingServer) GetChatRoom(*Empty, grpc.ServerStreamingServer[Room]) error {
	return status.Errorf(codes.Unimplemented, "method GetChatRoom not implemented")
}
func (UnimplementedChattingServer) CreateRoom(context.Context, *CreateRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedChattingServer) RemoveRoom(context.Context, *RemoveRoomRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoom not implemented")
}
func (UnimplementedChattingServer) EnterChatRoom(context.Context, *RoomRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnterChatRoom not implemented")
}
func (UnimplementedChattingServer) ExitChatRoom(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitChatRoom not implemented")
}
func (UnimplementedChattingServer) Chatting(grpc.BidiStreamingServer[Message, Message]) error {
	return status.Errorf(codes.Unimplemented, "method Chatting not implemented")
}
func (UnimplementedChattingServer) mustEmbedUnimplementedChattingServer() {}
func (UnimplementedChattingServer) testEmbeddedByValue()                  {}

// UnsafeChattingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChattingServer will
// result in compilation errors.
type UnsafeChattingServer interface {
	mustEmbedUnimplementedChattingServer()
}

func RegisterChattingServer(s grpc.ServiceRegistrar, srv ChattingServer) {
	// If the following call pancis, it indicates UnimplementedChattingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chatting_ServiceDesc, srv)
}

func _Chatting_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).Login(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatting_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).Logout(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatting_GetChatRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChattingServer).GetChatRoom(m, &grpc.GenericServerStream[Empty, Room]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatting_GetChatRoomServer = grpc.ServerStreamingServer[Room]

func _Chatting_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatting_RemoveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).RemoveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_RemoveRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).RemoveRoom(ctx, req.(*RemoveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatting_EnterChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).EnterChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_EnterChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).EnterChatRoom(ctx, req.(*RoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatting_ExitChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServer).ExitChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chatting_ExitChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServer).ExitChatRoom(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chatting_Chatting_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChattingServer).Chatting(&grpc.GenericServerStream[Message, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chatting_ChattingServer = grpc.BidiStreamingServer[Message, Message]

// Chatting_ServiceDesc is the grpc.ServiceDesc for Chatting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chatting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatting.Chatting",
	HandlerType: (*ChattingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Chatting_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Chatting_Logout_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Chatting_CreateRoom_Handler,
		},
		{
			MethodName: "RemoveRoom",
			Handler:    _Chatting_RemoveRoom_Handler,
		},
		{
			MethodName: "EnterChatRoom",
			Handler:    _Chatting_EnterChatRoom_Handler,
		},
		{
			MethodName: "ExitChatRoom",
			Handler:    _Chatting_ExitChatRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChatRoom",
			Handler:       _Chatting_GetChatRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chatting",
			Handler:       _Chatting_Chatting_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chatting/chatting.proto",
}
